#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'pp'
require 'shellwords'

input = []
piped = false

if $stdin.tty?
  input = ARGV
else
  piped = true
  input = ARGV.concat($stdin.gets.shellsplit)
end

help_text = "Usage: lists [list name or arg] arg
  -g, --generate generates a new config
  -al, --add-list        adds a new list
  -rl, --remove-list     removes the specified list
  -ll, --list-lists      list all list names
  -lr, --list-recursive  list all lists show content
  -lc, --list-contents   list a specified lists contents
  -h, --help             view this help text
any other first arugments are taken as a list name to do actions on
actions are:
  add: adds the specified entry to the list
    lists todo add \"get mail\"
  remove: removes the specified entry from the list
    lists todo remove grocery
  check: checks the specified entry
    lists todo check \"get mail\"
  uncheck: unchecks the specified entry
    lists todo uncheck \"ship that package\""

conf_location = File.expand_path('~/.lists.conf')

def add_entries(list_name, list, entries)
  entries.each do |entry|
    if list_has_entry(list, entry)
      if choice(piped, 'Entry already exists, overwrite?')
        list[entry] = false
        puts "Added entry \"#{entry}\" to list \"#{list_name}\"."
      end
    else
      list[entry] = false
      puts "Added entry \"#{entry}\" to list \"#{list_name}\"."
    end
  end
end

def check_entries(list_name, list, entries)
  entries.each do |entry|
    if list_has_entry(list, entry)
      if list_has_entry(list, entry)
        list[entry] = true
        puts "Entry \"#{entry}\" on list \"#{list_name}\" checked."
      else
        puts "Entry \"#{entry}\" does not exist on list \"#{list_name}\""
      end
    end
  end
end

def remove_entries(list_name, list, entries)
  entries.each do |entry|
    if list_has_entry(list, entry)
      list.delete(entry)
      puts "Entry \"#{entry}\" removed from list \"#{list_name}\""
    else
      puts "Entry \"#{entry}\" does not exist on list \"#{list_name}\""
    end
  end
end

def uncheck_entries(list_name, list, entries)
  entries.each do |entry|
    if list_has_entry(list, entry)
      if list_has_entry(list, entry)
        list[entry] = false
        puts "Entry \"#{entry}\" on list \"#{list_name}\" unchecked."
      else
        puts "Entry \"#{entry}\" does not exist on list \"#{list_name}\""
      end
    end
  end
end

def choice(piped, message)
  if piped
    true
  else
    print "#{message} [y/n] "
    choice = $stdin.gets.chomp.downcase
    choice == 'y'
  end
end

def list_has_entry(list, entry)
  if list[entry] == false || list[entry] == true || !list[entry].nil?
    true
  else
    false
  end
end

def edit_config(file_path, new_data)
  conf = File.open(file_path, 'w')
  new_conf = JSON.pretty_generate(new_data)
  conf << new_conf
  conf.close
end

def read_config(file_path)
  conf_file = File.open(file_path, 'r')
  conf = conf_file.read
  data = JSON.parse(conf)
  conf_file.close
  data
end

def print_list(list, spacing = 0)
  indent = Array.new(spacing) { ' ' }.join('')
  list.sort.to_h.each do |k, v|
    if v
      puts "#{indent}☑ #{k}"
    else
      puts "#{indent}☐ #{k}"
    end
  end
end

if input[0] == '-g' || input[0] == '--generate'
  if File.exist?(conf_location)
    if choice(piped, 'Existing config file found, are you sure you want to overwrite it?')
      edit_config(conf_location, {})
    else
      exit(1)
    end
  else
    edit_config(conf_location, {})
  end
elsif File.exist?(conf_location)
  lists = read_config(conf_location)
  mode = input[0]
  list = input[1]
  if ['-al', '--add-list'].include?(mode)
    if lists.key?(list)
      if choice(piped, 'List exists, overwrite?')
        lists[input[1]] = {}
        edit_config(conf_location, lists)
        puts "List \"#{list}\" added."
      else
        puts 'Cancelled Adding list.'
      end
    else
      lists[input[1]] = {}
      edit_config(conf_location, lists)
      puts "List \"#{list}\" added."
    end
  elsif ['-h', '--help'].include?(mode)
    puts help_text
  elsif ['-rl', '--remove-list'].include?(mode)
    if lists[list]
      lists.delete(input[1])
      edit_config(conf_location, lists)
      puts "List \"#{list}\" removed."
    else
      puts "List \"#{list}\" does not exist."
    end
  elsif ['-ll', '--list-lists'].include?(mode)
    lists.sort.to_h.each do |k, _v|
      puts k
    end
  elsif ['-lc', '--list-contents'].include?(mode)
    if lists[list]
      print_list(lists[list])
    else
      puts "List \"#{list}\" does not exist."
    end
  elsif ['-lr', '--list-recursive'].include?(mode)
    lists.sort.to_h.each do |k, v|
      puts "#{k}:"
      print_list(v, 2)
    end
  elsif lists[input[0]]
    list_name = input[0]
    list = lists[list_name]
    operation = input[1]
    entries = input[2, input.length]
    case operation
    when 'add'
      add_entries(list_name, list, entries)
      edit_config(conf_location, lists)
    when 'check'
      check_entries(list_name, list, entries)
      edit_config(conf_location, lists)
    when 'uncheck'
      uncheck_entries(list_name, list, entries)
      edit_config(conf_location, lists)
    when 'remove'
      remove_entries(list_name, list, entries)
      edit_config(conf_location, lists)
    else
      puts "operation \"#{operation}\" not a valid operation"
    end
  else
    puts "List \"#{mode}\" not found."
  end
else
  puts 'Config file not found, please run with -g or --generate to make a config.'
end
