#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'pp'

input = if $stdin.tty?
          ARGV
        else
          ARGV.concat($stdin.gets.shellsplit)
        end

help_text = "Usage: pastes [ARG] [ARG] [ARG]
  -l, --list      list pastes
  -h, --help      access help
  -a, --add       add a paste with the desired name and text to the config
  -r, --remove    remove the selected paste from the the config
  -g, --generate  generate a new config file
  -s, --sort      sort pastes alphabetically"

conf_location = File.expand_path('~/.pastes.conf')

def int?(value)
  true if Integer(value)
rescue StandardError
  false
end

def edit_config(file_path, new_data)
  conf = File.open(file_path, 'w')
  new_conf = JSON.pretty_generate(new_data)
  conf << new_conf
  conf.close
end

def read_config(file_path)
  conf_file = File.open(file_path, 'r')
  conf = conf_file.read
  data = JSON.parse(conf)
  conf_file.close
  data
end

if input[0] == '-g' || input[0] == '--generate'
  if File.exist?(conf_location)
    print 'Existing config file found, are you sure you want to overwrite it? [y/n] '
    choice = $stdin.gets.chomp.downcase
    case choice
    when 'y'
      edit_config(conf_location, {})
    when 'n'
      puts 'Config generation cancelled.'
    else
      exit(1)
    end
  else
    edit_config(conf_location, {})
  end
elsif File.exist?(conf_location)
  pastes = read_config(conf_location)
  if input[0] == '-l' || input[0] == '--list'
    pastes.sort.to_h.each_with_index do |(k, v), i|
      puts "#{i}:#{k}: \"#{v}\""
    end
  elsif input[0] == '-a' || input[0] == '--add'
    pastes[input[1]] = input[2]
    edit_config(conf_location, pastes.sort.to_h)
    puts "Paste \"#{input[1]}\" added with text \"#{input[2]}\"."
  elsif input[0] == '-r' || input[0] == '--remove'
    pastes.delete(input[1])
    edit_config(conf_location, pastes.sort.to_h)
    puts "Paste \"#{input[1]}\" removed."
  elsif input[0] == '-s' || input[0] == '--sort'
    edit_config(conf_location, pastes.sort.to_h)
    puts 'Pastes sorted.'
  elsif input[0] == '-h' || input[0] == '--help'
    puts help_text
  elsif int?(input[0])
    pastes_array = pastes.values
    index = input[0].to_i
    if index <= pastes_array.length
      choice = pastes_array[index]
      system "printf \"#{choice}\" | xsel -b"
      puts "#{choice} copied to clipboard"
    else
      puts "Paste of index #{index} is out of range."
    end
  elsif pastes[input[0]]
    choice = pastes[input[0]]
    system "printf \"#{choice}\" | xsel -b"
    puts "#{choice} copied to clipboard"
  else
    puts "No paste matching \"#{input[0]}\" found."
  end
else
  puts 'Config file not found, please run with -g or --generate to make a config.'
end
